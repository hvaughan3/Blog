@model HinesSite.Models.Blogpost

@{
    ViewBag.Title = "Create Post";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<caption><h2>Create</h2></caption>

@using(Html.BeginForm("Create", "Blogpost", FormMethod.Post, new { enctype = "multipart/form-data" })) {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>New Blog Post</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = "Blog Post Title" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subtitle, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subtitle, new { htmlAttributes = new { @class = "form-control", @placeholder = "Subtitle Text" } })
                @Html.ValidationMessageFor(model => model.Subtitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" >
            @Html.LabelFor(model => model.Body, new { @class = "control-label col-md-2" })
            <div class="col-md-10" >
                @Html.TextAreaFor(model => model.Body, new { @class = "form-control", @placeholder = "Type Blog Post content" })
                @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*<label class="control-label col-md-2" for="Images">Images</label> vertical-align: inherit; display: initial; *@
            @Html.LabelFor(model => model.FileUrlArray, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @* TODO: Use JavaScript to make the fake input below work like a file input and inject into the hidden one below *@
                <input id="FileUrlArray" class="realFileInput" type="file" value="" name="Images" data-val="true" accept="image/*" multiple="multiple" />
                <input id="fakeFileUrlArray" class="form-control fakeFileInput" type="text">
                <a class="btn btn-default fakeFileInput" onclick="$('input[id=FileUrlArray]').click();">Browse</a>
                <span class="field-validation-valid text-danger" data-valmsg-replace="true" data-valmsg-for="FileUrlArray"></span>
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="TagId">Tags</label>
            <div class="col-md-10">
                @Html.DropDownList("TagId", string.Empty)
                @Html.ValidationMessageFor(model => model.TagId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedOn, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Raw(ViewBag.CreatedOn)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<section>
    @Html.ActionLink("Back to List", "Index")
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
